Union-Find algorithm
 
Disjoint-Set is the data structure used in case of Union-Find algorithm.
 
Disjoint-Set is defined as follows:
 
Given a set of elements. These items are partitioned into several subsets such that each element is restricted to a particular subset.
In simple terms, A Disjoint-Set data structure is a group of sets where no two sets contain the same element.
It is also called union-find data structure because it supports Union and Find operations on subsets.
Find: Each subset is represented by an element of that subset known as the set-representative.This operation returns the set-representative of a particular element to which it belongs to. This operation has worst case time complexity of O(N) where N is the number of elements in the set since it finds the set-representative recursively.
 
Union:In this operation two subsets are merged into one subset.The set-representative of the merged subset will one among the set-representatives of those subsets which are merged. This operation has time complexity of O(1).
Make-Set:This operation creates disjoint sets for each element in the given set.Intially set-representative for each disjoint set will be the element contained in it. This operation has time complexity of O(1).
 
Here each subset can be called as a disjoint-set.
 
2)Introduction
 
In simple terms, a graph is said to have cycle if there exists a path whose start vertex and end vertex are the same.It is termed as cyclic graph.
 
 
Consider the path,
 
1-2-3-4-5-1
The start and end vertices are the same.Hence, the graph contains cycle.
3)Algorithm to find cycle using Union-Find
 
1)Create disjoint-sets for each of the vertices in the graph.
2)Repeat the following steps for each edge(u,v) in the graph
-If u and v both belong to the same disjoint-set then cycle exists in the graph.
-Else merge the disjoint-sets in which u and v are present.
 
4)Understanding algorithm through example
Let's use the Union-Find algorithm to find cycle in an undirected graph.
 
Find the edges from the graph.
 
1-2
2-3
3-4
3-6
4-5
1-5
 
As there are six vertices, we'll create six disjoint-sets.
SET	ELEMENTS	SET-REPRESENTATIVE
S1	{1}	1
S2	{2}	2
S3	{3}	3
S4	{4}	4
S5	{5}	5
S6	{6}	6
Consider the edge 1-2,
 
FIND(1)=1
FIND(2)=2
 
UNION(1,2)
 
S1,S2 will be merged to S1 and set-representative of S1 will now be 1.

 
k3
 
SET	ELEMENTS	SET-REPRESENTATIVE
S1	{1,2}	1
S3	{3}	3
S4	{4}	4
S5	{5}	5
S6	{6}	6
Consider the edge 2-3,
 
FIND(2)=1
FIND(3)=3
 
UNION(1,3)
 
S1,S3 will be merged to S1 and set-representative of S1 will now be 1.
 
 
 
SET	ELEMENTS	SET-REPRESENTATIVE
S1	{1,2,3}	1
S4	{4}	4
S5	{5}	5
S6	{6}	6
Consider the edge 3-4,
 
FIND(3)=1
FIND(4)=4
 
UNION(1,4)
 
S1,S4 will be merged to S1 and set-representative of S1 will now be 1.
 
 
SET	ELEMENTS	SET-REPRESENTATIVE
S1	{1,2,3,4}	1
S5	{5}	5
S6	{6}	6
Consider the edge 3-6,
 
FIND(3)=1
FIND(6)=6
 
UNION(1,6)
 
S1,S6 will be merged to S1 and set-representative of S1 will now be 1.
 
 
 
SET	ELEMENTS	SET-REPRESENTATIVE
S1	{1,2,3,4,6}	1
S5	{5}	5
Consider the edge 4-5,
 
FIND(4)=1
FIND(5)=5
 
CALL UNION(1,5)
 
S1,S5 will be merged to S1 and set-representative of S1 will now be 1.

 
SET	ELEMENTS	SET-REPRESENTATIVE
S1	{1,2,3,4,5,6}	1
Consider the edge 1-5,
 
FIND(1)=1
FIND(5)=1
 
Here FIND(1)=FIND(5) that means both belong to same disjoint set. Hence,the graph has a cycle.
package ufa;
 
import java.util.*;
 
// A class to store a graph edge
class Edge
{
    int source, dest;
 
    public Edge(int source, int dest)
    {
        this.source = source;
        this.dest = dest;
    }
}
 
// A class to represent a graph object
class Graph
{
    // A list of lists to represent an adjacency list
    List<List<Integer>> adjList = null;
 
    // Constructor
    Graph(List<Edge> edges, int n)
    {
        adjList = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
 
        // add edges to the undirected graph (add each edge once only to avoid
        // detecting cycles among the same edges, say x -> y and y -> x)
        for (Edge edge: edges) {
            adjList.get(edge.source).add(edge.dest);
        }
    }
}
 
// A class to represent a disjoint set
class DisjointSet
{
    private Map<Integer, Integer> parent = new HashMap<>();
 
    // perform MakeSet operation
    public void makeSet(int n)
    {
        // create `n` disjoint sets (one for each vertex)
        for (int i = 0; i < n; i++) {
            parent.put(i, i);
        }
    }
 
    // Find the root of the set in which element `k` belongs
    public int find(int k)
    {
        // if `k` is root
        if (parent.get(k) == k) {
            return k;
        }
 
        // recur for the parent until we find the root
        return find(parent.get(k));
    }
 
    // Perform Union of two subsets
    public void union(int a, int b)
    {
        // find the root of the sets in which elements `x` and `y` belongs
        int x = find(a);
        int y = find(b);
 
        parent.put(x, y);
    }
}
 
class Main
{
    // Returns true if the graph has a cycle
    public static boolean findCycle(Graph graph, int n)
    {
        // initialize `DisjointSet` class
        DisjointSet ds = new DisjointSet();
 
        // create a singleton set for each element of the universe
        ds.makeSet(n);
 
        // consider every edge (u, v)
        for (int u = 0; u < n; u++)
        {
            // Recur for all adjacent vertices
            for (int v: graph.adjList.get(u))
            {
                // find the root of the sets to which elements `u` and `v` belongs
                int x = ds.find(u);
                int y = ds.find(v);
 
                // if both `u` and `v` have the same parent, the cycle is found
                if (x == y) {
                    return true;
                }
                else {
                    ds.union(x, y);
                }
            }
        }
 
        return false;
    }
 
    // Unionâ€“find algorithm for cycle detection in a graph
    public static void main(String[] args)
    {
        // List of graph edges
        List<Edge> edges = Arrays.asList(
                new Edge(0, 1), new Edge(0, 6), new Edge(0, 7),
                new Edge(1, 2), new Edge(1, 5), new Edge(2, 3),
                new Edge(2, 4), new Edge(7, 8), new Edge(7, 11),
                new Edge(8, 9), new Edge(8, 10), new Edge(10, 11)
                // edge (10, 11) introduces a cycle in the graph
        );
 
        // total number of nodes in the graph (labelled from 0 to 11)
        int n = 12;
 
        // construct graph
        Graph graph = new Graph(edges, n);
 
        if (findCycle(graph, n)) {
            System.out.println("Cycle Found");
        }
        else {
            System.out.println("No Cycle is Found");
        }
    }
}