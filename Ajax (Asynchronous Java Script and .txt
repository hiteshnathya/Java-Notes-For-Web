Ajax (Asynchronous Java Script and XML)
It is not a programming language but it is a technology for developing web application along with Html , css and Javascript.
AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.
AJAX = Asynchronous JavaScript And XML.
AJAX is not a programming language.
AJAX just uses a combination of:
A browser built-in XMLHttpRequest object (to request data from a web server)
JavaScript and HTML DOM (to display or use the data)
How AJAX Works
1. An event occurs in a web page (the page is loaded, a button is clicked)
2. An XMLHttpRequest object is created by JavaScript
3. The XMLHttpRequest object sends a request to a web server
4. The server processes the request
5. The server sends a response back to the web page
6. The response is read by JavaScript
7. Proper action (like page update) is performed by JavaScript
Create  XMLHttpRequest object
Var xhhp = new XMLHttpRequest();
Properties of XMLHttpRequest object
Property
	
Description


onreadystatechange
	
Defines a function to be called when the readyState property changes


readyState
	
Holds the status of the XMLHttpRequest.
0: request not initialized
1: server connection established
2: request received
3: processing request
4: request finished and response is ready


responseText
	
Returns the response data as a string


responseXML
	
Returns the response data as XML data


Status
	
Returns the status-number of a request
200: "OK"
403: "Forbidden"
404: "Not Found"
For a complete list go to the Http Messages Reference


statusText
	
Returns the status-text (e.g. "OK" or "Not Found")
 
Send a Request To a Server
To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:
Send a Request To a Server
To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();
Method
	
Description


open(method, url, async)
	
Specifies the type of request
method: the type of request: GET or POST
url: the server (file) location
async: true (asynchronous) or false (synchronous)


send()
	
Sends the request to the server (used for GET)


send(string)
	
Sends the request to the server (used for POST)
 
 
Function changeContent()
{
Var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
  if (this.readyState == 4 && this.status == 200) {
    document.getElementById("demo").innerHTML = this.responseText;
  }
};
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();
}
Example 1
<!DOCTYPEhtml>
<htmllang="en">
<head>
   <metacharset="UTF-8">
   <metaname="viewport"content="width=device-width, initial-scale=1.0">
   <title>Document</title>
</head>
<body>
   <divid = "f1">
       <h2> Ajax Example</h2>
       <buttontype ="button"onclick = "changeContent()"> Change Content</button>
   </div>
   <script>
       functionchangeContent()
       {
           var xhttp= newXMLHttpRequest();
           xhttp.onreadystatechange= function()
           {
               if(this.readyState== 4&& this.status== 200)
               {
                   document.getElementById("f1").innerHTML= this.responseText;
               }
           }
           xhttp.open("GET","content.txt",true);
           xhttp.send();
       }
   </script>
</body>
</html>
 
 
Example 2
<!DOCTYPEhtml>
<htmllang="en">
<head>
   <metacharset="UTF-8">
   <metaname="viewport"content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <script>
       functiongetData()
       {
                   
       varurl ="https://jsonplaceholder.typicode.com/posts/1";
       varreq;
       if(window.XMLHttpRequest)
   {
       req= newXMLHttpRequest();
 
   }
   elseif (window.ActiveXObject)
   {
       req= newActiveXObject("Microsoft.XMLHTTP");
   }
   req.onreadystatechange= function()
   {
       if(req.readyState== 4&& req.status== 200)
       {
          var jsonObj= JSON.parse(req.responseText);
          document.getElementById("userId").innerHTML= jsonObj.userId;
          document.getElementById("id").innerHTML= jsonObj.id;
          document.getElementById("title").innerHTML= jsonObj.title;
       }
   }
   req.open("GET", url, true);
   req.send(null);
}
   </script>
</head>
<body>
   USERID : <spanid = "userId"></span><br>
   ID: <spanid = "id"></span><br>
   TITLE: <spanid = "title"></span><br>   
 
   <buttontype = "button"onclick="getData()">Get Data</button>
</body>
</html>
 
has context menu


has context menu